{"version":3,"sources":["serviceWorker.js","Header.js","AddSubscriber.js","ShowSubscribers.js","PhoneDirectory.js","index.js"],"names":["Boolean","window","location","hostname","match","Header","param","className","heading","AddSubscriber","phoneInputChangedHandler","e","setState","phone","target","value","nameInputChangedHandler","name","addHandler","state","nameValidation","phoneValidation","props","addSubscriberHandler","history","push","id","to","autoComplete","htmlFor","type","onChange","this","style","margin","color","maxLength","onClick","Component","ShowSubscribers","deleteButtonHandler","subscriberID","deleteSubscriberHandler","subscriberList","map","sub","key","bind","PhoneDirectory","newSubsciber","length","subscriberIndex","forEach","subscriber","index","splice","exact","path","render","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2f1b700f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport './Header.css';\r\n\r\n// Class Component\r\n/*class Header extends React.Component {\r\n  render(){ \r\n    return(\r\n     <div className=\"header\">\r\n         {this.props.homePage}\r\n     </div>\r\n    )\r\n  }\r\n}*/\r\n\r\n// Functional Component\r\nconst Header = function (param) {\r\n  return(\r\n    <div className=\"header\">\r\n         {param.heading}\r\n     </div>\r\n  )\r\n}\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\nimport Header from './Header';\r\nimport './AddSubscriber.css';\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass AddSubscriber extends Component{\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      id:0,\r\n      name: '',\r\n      phone: '',\r\n      nameValidation: 'dispNone',\r\n      phoneValidation: 'dispNone'\r\n    }\r\n  }\r\n  phoneInputChangedHandler = (e) =>{\r\n    // const state = this.state;\r\n    // state[e.target.name] = e.target.value;\r\n    // this.setState(state);\r\n    this.setState({phone: e.target.value});\r\n    // console.log(state.phone);\r\n  }\r\n  nameInputChangedHandler = (e) => {\r\n    this.setState({name: e.target.value});\r\n    // console.log(this.state.name);\r\n  }\r\n  // onSubscribeButton = (e) =>{  \r\n  //   if(this.state.name !=='' && this.state.phone !== ''){\r\n  //     e.preventDefault();\r\n  //     this.props.addSubscriberHandler(this.state);\r\n  //     this.setState({id:0, name: '', phone: ''});\r\n  //     this.props.history.push(\"/\");\r\n  //   }    \r\n  // }\r\n  addHandler = () =>{\r\n    this.state.name === '' ? this.setState({nameValidation: 'dispBlock'}) : this.setState({nameValidation: 'dispNone'})\r\n    this.state.phone === ''? this.setState({phoneValidation: 'dispBlock'}) : this.setState({phoneValidation: 'dispNone'})\r\n    this.props.addSubscriberHandler(this.state);\r\n    if(this.state.name !=='' && this.state.phone !== '')    //To avoid redirecting without filling fields\r\n    this.props.history.push(\"/\");\r\n  }\r\n  \r\n  render(){\r\n    return(\r\n      <div>\r\n        <Header heading=\"ADD SUBSCRIBER\" />     \r\n        <div className=\"body-container\">\r\n         <Link to=\"/\"><button className=\"custom-btn\">Back</button></Link>\r\n        </div>\r\n        <form className=\"form-container\" autoComplete=\"off\" >\r\n          <label htmlFor=\"name\" className=\"label-control\">Name: </label><br/>\r\n          <input id=\"name\" name=\"name\" type=\"text\" className=\"input-control\" onChange={this.nameInputChangedHandler}/>\r\n          <p className={this.state.nameValidation} style={{margin: 0, color: 'red'}}>*Required</p>\r\n          <br/><br/>\r\n          <label htmlFor=\"phone\" className=\"label-control\">Phone: </label><br/>\r\n          <input id=\"phone\" name=\"phone\" type=\"text\" maxLength=\"10\" className=\"input-control\" onChange={this.phoneInputChangedHandler}/>\r\n          <p className={this.state.phoneValidation} style={{margin: 0, color: 'red'}}>*Required</p>\r\n          <br/><br/>\r\n          <div>\r\n            <span className=\"subscriber-info-container\">Subscriber to be added: </span><br/>\r\n            <span className=\"subscriber-info\">Name: {this.state.name}</span><br/>\r\n            <span className=\"subscriber-info\">Phone: {this.state.phone}</span><br/><br/><br/>\r\n            </div>\r\n        </form>         \r\n          <button  type=\"submit\" className=\"custom-btn add-btn padding\" onClick={this.addHandler}>ADD</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default AddSubscriber;","import React,{Component} from 'react';\nimport Header from './Header';\nimport {Fragment} from 'react';\nimport './ShowSubscribers.css';\nimport {Link} from 'react-router-dom';\nimport { FaTrash } from 'react-icons/fa';\n\n// let subscribers = [\n//   { id: 1,\n//     name: 'Naren',\n//    phone: 9980636388\n//   },\n//   { id: 2,\n//     name: 'Deepu',\n//     phone: 1234567890\n//   },\n//   {\n//     id:3,\n//     name: 'Jinny',\n//     phone: 8125637264\n//   }\n// ]\n\nclass ShowSubscribers extends Component {\n\n  // constructor(){\n  //   super();\n  //   this.state = {\n  //     subscribers:[]\n  //   }\n  //   console.log(\"Constructor called\");\n  // }\n\n  // componentDidMount(){\n  //   console.log(\"Mount called\");\n  //   let newSubscriber = {id: 1,\n  //     name: \"Naren\",\n  //     phone: 9980636388\n  //   }\n  //   let subscribersList = this.state.subscribers;\n  //   subscribersList.push(newSubscriber);\n  //   this.setState({subscribers : subscribersList});\n  //   console.log(\"state\",this.state);\n  // }\n  deleteButtonHandler = (subscriberID) => {\n    this.props.deleteSubscriberHandler(subscriberID);\n  }\n\n  render(){\n    // console.log(\"Render called\");\n  return (\n    <Fragment>\n      <Header heading = \"PHONE DIRECTORY\" />\n      <div className=\"body-container\">\n        <Link to=\"/add\"><button className=\"add-btn custom-btn\">ADD</button></Link>\n        <div className=\"grid-container\">\n          <span className=\"grid-headings\">NAME</span>\n          <span className=\"grid-headings\">PHONE</span>\n        </div>\n        {\n          this.props.subscriberList.map(sub =>{\n            return(\n              <div className=\"grid-container\" key={sub.id}>\n                <span className=\"grid-items\">{sub.name}</span>\n                <span className=\"grid-items\">{sub.phone}</span>\n                <div className=\"action-btn-container\">\n                 {/* <button className=\"grid-del-btn\" onClick={this.deleteButtonHandler.bind(this, sub.id)}>DELETE<FaTrash /></button> */}\n                 <span className=\"grid-del-btn\" onClick={this.deleteButtonHandler.bind(this, sub.id)}><FaTrash className=\"trash\"/></span>\n                </div>\n              </div>\n            )\n          })\n        }\n      </div>\n    </Fragment>\n  );  \n  }\n}\n\nexport default ShowSubscribers;\n\n\n\n","import React, {Component} from 'react';\r\nimport AddSubscriber from './AddSubscriber';\r\nimport ShowSubscribers from './ShowSubscribers';\r\nimport {HashRouter as Router, Route} from 'react-router-dom';\r\n\r\n\r\nclass PhoneDirectory extends Component{\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      subscriberList : []\r\n    }\r\n  }\r\n\r\n  addSubscriberHandler = (newSubsciber) => {\r\n    let subscriberList = this.state.subscriberList;\r\n    if(newSubsciber.name !== '' && newSubsciber.phone !== ''){  //To avoid adding Empty entries\r\n    if(subscriberList.length > 0){\r\n      newSubsciber.id = subscriberList[subscriberList.length-1].id + 1;\r\n    }else{\r\n      newSubsciber.id = 1;\r\n    }\r\n    subscriberList.push(newSubsciber);\r\n    this.setState({subscriberList : subscriberList});\r\n  }\r\n    // console.log(this.state.subscriberList);\r\n    // console.log(\"Phone Directory\");\r\n  }\r\n\r\n  deleteSubscriberHandler = (subscriberID) => {\r\n    let subscriberList = this.state.subscriberList;\r\n    let subscriberIndex = 0;\r\n    subscriberList.forEach(function(subscriber, index){\r\n      if(subscriber.id === subscriberID){\r\n        subscriberIndex = index;\r\n      }\r\n    })\r\n    let newSubsciber = subscriberList;\r\n    newSubsciber.splice(subscriberIndex, 1);\r\n    this.setState({subscriberList : newSubsciber});\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div className=\"main-container\">\r\n        <Router>\r\n          <Route exact path='/' render={(props) => <ShowSubscribers {...props} subscriberList={this.state.subscriberList} deleteSubscriberHandler={this.deleteSubscriberHandler} />} />\r\n          <Route exact path='/add' render={({history}, props) => <AddSubscriber history={history} {...props} addSubscriberHandler={this.addSubscriberHandler} />} />\r\n        </Router>\r\n      {/*<AddSubscriber addSubscriberHandler = {this.addSubscriberHandler}/>\r\n      <ShowSubscribers subscriberList = {this.state.subscriberList}/>*/}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default PhoneDirectory;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './common/common.css';\nimport * as serviceWorker from './serviceWorker';\nimport PhoneDirectory from './PhoneDirectory';\n\nReactDOM.render(\n  <React.StrictMode>\n    <PhoneDirectory />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}